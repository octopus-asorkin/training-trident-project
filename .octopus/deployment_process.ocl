step "calculate-deployment-mode" {
    name = "Calculate Deployment Mode"

    action {
        notes = <<-EOT
                **Always Runs**
                
                Determines if the deployment is a deployment, a rollback, or a redeployment.
                
            EOT
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Template.Id = "ActionTemplates-124"
            Octopus.Action.Template.Version = "5"
        }
        worker_pool_variable = ""
    }
}

step "run-the-trident-database-creation-runbook" {
    condition = "Variable"
    name = "Run the Create Trident Database Runbook"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Calculate Deployment Mode].Output.RunOnDeploy}#{/unless}"
    }

    action {
        notes = <<-EOT
                **Runs on Deployments Only** 
                
                Runs the runbook to create the trident database on the current environment's infrastructure. This can run multiple times, as it checks to see if the database already exists.
            EOT
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Template.Id = "ActionTemplates-122"
            Octopus.Action.Template.Version = "14"
            Run.Runbook.Api.Key = "#{Project.Runbook.Api.Key}"
            Run.Runbook.AutoApproveManualInterventions = "No"
            Run.Runbook.Base.Url = "#{Octopus.Web.ServerUri}"
            Run.Runbook.CancelInSeconds = "1800"
            Run.Runbook.DateTime = "N/A"
            Run.Runbook.Environment.Name = "#{Octopus.Environment.Name}"
            Run.Runbook.Machines = "N/A"
            Run.Runbook.ManualIntervention.EnvironmentToUse = "#{Octopus.Environment.Name}"
            Run.Runbook.Name = "Create Trident Database"
            Run.Runbook.Project.Name = "Trident"
            Run.Runbook.Space.Name = "#{Octopus.Space.Name}"
            Run.Runbook.Tenant.Name = "#{Octopus.Deployment.Tenant.Name}"
            Run.Runbook.UsePublishedSnapShot = "True"
            Run.Runbook.Waitforfinish = "True"
        }
        worker_pool = "hosted-windows"
    }
}

step "generate-database-delta-report" {
    condition = "Variable"
    name = "Generate Database Delta Report"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Calculate Deployment Mode].Output.RunOnDeploy}#{/unless}"
    }

    action {
        action_type = "Octopus.Script"
        notes = <<-EOT
                **Runs on Deployments Only** 
                
                Step that will generate a delta script report that can be downloaded by the DBAs during the manual intervention step. 
            EOT
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $packagePath = $OctopusParameters["Octopus.Action.Package[Trident.Database].ExtractedPath"]
                $connectionString = $OctopusParameters["Project.Connection.String"]
                $environmentName = $OctopusParameters["Octopus.Environment.Name"]
                $reportPath = $OctopusParameters["Project.Database.Report.Path"]
                
                cd $packagePath
                $appToRun = ".\Octopus.Trident.Database.DbUp"
                $generatedReport = "$reportPath\UpgradeReport.html"
                
                & $appToRun --ConnectionString="$connectionString" --PreviewReportPath="$reportPath"
                
                New-OctopusArtifact -Path "$generatedReport" -Name "$environmentName.UpgradeReport.html"
                
                
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-windows"

        packages "Trident.Database" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "Trident.Database"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "auto-approve-database-delta-script" {
    condition = "Variable"
    name = "Auto-Approve Database Delta Script"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Calculate Deployment Mode].Output.RunOnDeploy}#{/unless}"
    }

    action {
        environments = ["staging-blue", "staging-green"]
        notes = <<-EOT
                **Runs on Deployments Only** 
                
                Step that will check to see if the delta report has any commands requiring a DBA to approve the changes. 
            EOT
        properties = {
            Databases.AutoApproval.ReportPath = "#{Project.Database.Report.Path}\\UpgradeReport.html"
            Databases.AutoApprove.CommandsIndicatingChange = "#{SQL.Verification.Change.List}"
            Databases.AutoApprove.CommandsRequireApproval = "#{SQL.Verification.Command.List}"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Template.Id = "ActionTemplates-123"
            Octopus.Action.Template.Version = "0"
        }
        tenant_tags = ["Branch Type/Pseudo"]
        worker_pool = "hosted-windows"
    }
}

step "approve-database-delta-script" {
    condition = "Variable"
    name = "Approve Database Delta script"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{if Octopus.Deployment.Error == \"\"}#{Project.Database.ApprovalRequired}#{/if}"
    }

    action {
        action_type = "Octopus.Manual"
        environments = ["staging-blue", "staging-green"]
        notes = <<-EOT
                **Runs on Deployments Only**
                
                Manual intervention, it will pause the deployment and wait until the DBAs have approved the delta report. 
            EOT
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "True"
            Octopus.Action.Manual.Instructions = "Please approve the database delta script found in the artifacts section."
            Octopus.Action.Manual.ResponsibleTeamIds = "trident-dbas,global/octopus-managers"
        }
        tenant_tags = ["Branch Type/Pseudo"]
        worker_pool_variable = ""
    }
}

step "deploy-the-database-changes" {
    condition = "Variable"
    name = "Deploy the Database Changes"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Calculate Deployment Mode].Output.RunOnDeploy}#{/unless}"
    }

    action {
        action_type = "Octopus.Script"
        notes = <<-EOT
                **Runs on Deployments Only** 
                
                Steps to deploy the actual database changes to SQL Server.
            EOT
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $packagePath = $OctopusParameters["Octopus.Action.Package[Trident.Database].ExtractedPath"]
                $connectionString = $OctopusParameters["Project.Connection.String"]
                
                cd $packagePath
                $appToRun = ".\Octopus.Trident.Database.DbUp"
                
                & $appToRun --ConnectionString="$connectionString" 
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-windows"

        packages "Trident.Database" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "Trident.Database"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "deploy-trident-website-1" {
    name = "Deploy Trident Website 1"
    properties = {
        Octopus.Action.TargetRoles = "trident-web"
    }

    action "deploy-a-package" {
        action_type = "Octopus.TentaclePackage"
        name = "Deploy Trident Website"
        notes = <<-EOT
                **Always Runs** 
                
                Steps to deploy the code and replace the specific configuration values in the appSettings.json file.
            EOT
        properties = {
            Octopus.Action.EnabledFeatures = "Octopus.Features.JsonConfigurationVariables"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "octopus-server-built-in"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "appSettings.json"
            Octopus.Action.Package.PackageId = "Trident.Web"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "Trident.Web"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "verify-trident-application" {
    name = "Verify Trident Application"

    action {
        action_type = "Octopus.Manual"
        channels = ["hotfix"]
        notes = <<-EOT
                **Always Runs for the Release Channel**
                
                Pauses the deployment and allows for a quick sanity check of the application before disabling maintenance mode. 
            EOT
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "False"
            Octopus.Action.Manual.Instructions = "Please verify the Trident application."
            Octopus.Action.Manual.ResponsibleTeamIds = "trident-qa,developers,global/octopus-managers"
        }
        worker_pool_variable = ""
    }
}

step "disable-maintenance-mode" {
    name = "Update Load Balancer to Blue or Green"

    action {
        action_type = "Octopus.Script"
        channels = ["release", "hotfix"]
        notes = <<-EOT
                **Always Runs**
                
                Updates the load balancer to direct to blue or green, depending on where deployment occurred last.
            EOT
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                Write-Highlight "Disable Maintenance Mode"$currentEnvironment = $OctopusParameters["Octopus.Environment.Name"]
                Write-Highlight "Updating load balancer to point to $currentEnvironment"
            EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "hosted-windows"
    }
}

step "send-an-email" {
    condition = "Always"
    name = "Notify Developers of Status (email)"

    action {
        action_type = "Octopus.Email"
        notes = <<-EOT
                **Always Runs**
                
                Sends a notification message to anyone in the Trident Notifications email group letting them know the status of this deployment. 
            EOT
        properties = {
            Octopus.Action.Email.Body = "#{Notification.Body.Text}"
            Octopus.Action.Email.Subject = "#{Notification.Subject.Text}"
            Octopus.Action.Email.ToTeamIds = "trident-notifications"
        }
        worker_pool_variable = ""
    }
}

step "slack-send-simple-notification-on-failure" {
    condition = "Failure"
    name = "Slack - Send Simple Notification (on failure)"
    properties = {
        Octopus.Action.TargetRoles = "trident-web"
    }

    action {
        notes = <<-EOT
                **Runs on failure**
                
                Sends a Slack message to the trident-deployment-notificatinos channel when a failure occurs. 
            EOT
        properties = {
            Octopus.Action.RunOnServer = "false"
            Octopus.Action.Template.Id = "ActionTemplates-81"
            Octopus.Action.Template.Version = "14"
            ssn_Channel = "trident-deployment-notifications"
            ssn_Color = "danger"
            ssn_HookUrl = "#{Notification.Slack.Webhook.Url}"
            ssn_IconUrl = "https://octopus.com/content/resources/favicon.png"
            ssn_Message = "#{Notification.Body.Text}"
            ssn_Title = "#{Notification.Subject.Text}"
            ssn_Username = "Trident Project in Octopus Deploy"
        }
        worker_pool_variable = ""
    }
}